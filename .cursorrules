# .cursorrules - Salon Project Architecture & Development Guidelines

## 🎯 AI Assistant Role & Mindset
You are a **senior software engineer** with deep expertise in:
- Clean architecture & SOLID principles
- TypeScript/Next.js ecosystem
- Security-first development
- Performance optimization
- Code maintainability

**Core Principles:**
- Write production-ready, scalable code
- Prioritize security at every layer
- Maintain consistency across the codebase
- Prefer explicit over implicit
- Always consider the maintenance burden

## 📋 Project Context & Tech Stack

### Technology Stack (Non-Negotiable)
```typescript
// Core Stack - DO NOT DEVIATE
Next.js: 15+ (App Router ONLY)
TypeScript: Strict mode, no `any` unless justified
Supabase: BaaS with RLS policies
Drizzle ORM: Single source of truth for DB schema
Tailwind CSS: v4+, utility-first approach
Zod: Data validation at all levels
shadcn/ui: Base UI components
pnpm: Package manager (never npm/yarn)
```

### Architecture Overview
```
┌─────────────────────────────────────────────────────────────┐
│ 🎨 UI Layer (src/app, src/components)                      │
│ ├─ Server Components (data fetching)                        │
│ ├─ Client Components (interactivity)                        │
│ └─ Smart Page / Dumb Component pattern                      │
├─────────────────────────────────────────────────────────────┤
│ ⚡ Features Layer (src/features)                           │
│ ├─ Server Actions only                                      │
│ ├─ Thin controllers (validate → delegate)                   │
│ └─ No business logic here                                   │
├─────────────────────────────────────────────────────────────┤
│ 🧠 Domain Layer (src/core/domains)                        │
│ ├─ Pure business logic                                      │
│ ├─ Services & Repositories                                  │
│ └─ Framework-agnostic                                       │
├─────────────────────────────────────────────────────────────┤
│ 💾 Data Layer (src/db)                                     │
│ ├─ Drizzle schema                                           │
│ ├─ Database client                                          │
│ └─ Type-safe queries                                        │
└─────────────────────────────────────────────────────────────┘
```

## 🔧 Critical Development Patterns

### 1. Dependency Injection (Factory Pattern)
```typescript
// ✅ CORRECT - Dependencies injected
export const createAuthService = (
  repository: AuthRepository,
  supabase: SupabaseClient
) => ({
  async login(credentials: LoginCredentials) {
    // business logic here
  }
});

// ❌ INCORRECT - Direct imports
export const createAuthService = () => {
  // importing db directly is forbidden
  const result = await db.select()...
};
```

### 2. Zod Schema Separation
```typescript
// UI Schema - User-friendly validation
export const LoginFormSchema = z.object({
  email: z.string().email("Please enter a valid email"),
  password: z.string().min(8, "Password must be at least 8 characters")
});

// Server Schema - Data transformation
export const LoginActionSchema = z.object({
  email: z.string().email().toLowerCase().trim(),
  password: z.string().min(8).transform(hash)
});
```

### 3. Component Organization
```
src/components/
├── ui/                    # shadcn/ui components (untouched)
├── shared/               # Reusable across features
│   ├── PageHeader.tsx
│   └── SubmitButton.tsx
└── features/            # Feature-specific components
    ├── auth/
    │   ├── LoginForm.tsx
    │   └── RegisterForm.tsx
    └── stylist/
        └── StylistDashboard.tsx
```

## 🛡️ Security Implementation (4-Layer Defense)

### Layer 1: Middleware (src/middleware.ts)
```typescript
// ONLY checks authentication, NOT roles
export async function middleware(request: NextRequest) {
  const { user } = await getUser();
  
  if (!user && isProtectedRoute(pathname)) {
    return NextResponse.redirect(new URL('/auth/login', request.url));
  }
  
  // ❌ NEVER do role-based redirects in middleware
  // This causes infinite loops
}
```

### Layer 2: Layout Server Components
```typescript
// Verify roles and redirect appropriately
export default async function AdminLayout({ children }) {
  const { role } = await enforceRouteAccess('/admin');
  
  if (role !== ROLES.ADMIN) {
    throw new Error('Unauthorized access');
  }
  
  return <DashboardLayout>{children}</DashboardLayout>;
}
```

### Layer 3: Page Server Components
```typescript
// Double-check access (Defense in Depth)
export default async function AdminServicesPage() {
  const { role } = await enforceRouteAccess('/admin/services');
  
  if (role !== ROLES.ADMIN) {
    throw new Error('Unauthorized access to services management');
  }
  
  // page logic...
}
```

### Layer 4: Server Actions
```typescript
// Final validation before critical operations
export async function createServiceAction(payload: unknown) {
  await ensureUserIsAdmin(); // Throws if not admin
  
  return executeSafeAction(CreateServiceSchema, payload, async (data) => {
    // business logic
  });
}
```

## 📁 File Structure & Naming Conventions

### Domain Structure
```
src/core/domains/[domain]/
├── [domain].service.ts      # Business logic
├── [domain].repository.ts   # Data access
├── [domain].types.ts       # Domain types
├── [domain].constants.ts   # Domain constants
└── [domain].schemas.ts     # Validation schemas
```

### Constants Management
```typescript
// src/lib/constants.ts - Global constants
export const APP_ROUTES = {
  AUTH: {
    LOGIN: '/auth/login',
    REGISTER: '/auth/register'
  },
  ADMIN: '/admin',
  STYLIST: '/stylist'
} as const;

// src/core/domains/auth/auth.constants.ts - Domain-specific
export const AUTH_CONSTANTS = {
  SESSION_DURATION: 3600,
  MAX_LOGIN_ATTEMPTS: 3,
  MESSAGES: {
    INVALID_CREDENTIALS: 'Invalid email or password',
    ACCOUNT_LOCKED: 'Account temporarily locked'
  }
} as const;
```

## 🔍 Code Quality & Standards

### TypeScript Best Practices
```typescript
// ✅ Use strict types
interface User {
  id: string;
  email: string;
  role: 'ADMIN' | 'STYLIST' | 'CLIENT';
}

// ✅ Prefer type guards
function isAdmin(user: User): user is User & { role: 'ADMIN' } {
  return user.role === 'ADMIN';
}

// ❌ Avoid any
function processData(data: any) { // forbidden
  return data.something;
}
```

### Error Handling
```typescript
// ✅ Custom error classes
export class UniquenessError extends Error {
  constructor(field: string) {
    super(`${field} already exists`);
    this.name = 'UniquenessError';
  }
}

// ✅ Safe error responses
try {
  await dangerousOperation();
} catch (error) {
  logger.error('Operation failed:', error);
  return { error: 'Something went wrong' }; // Generic message
}
```

## 🎨 UI/UX Guidelines

### Component Patterns
```typescript
// ✅ Server Component (data fetching)
export default async function UsersPage() {
  const users = await getUsers();
  return <UsersList users={users} />;
}

// ✅ Client Component (interactivity)
'use client';
export function UsersList({ users }: { users: User[] }) {
  const [filter, setFilter] = useState('');
  // interactive logic
}
```

### Styling Rules
```typescript
// ✅ Tailwind utilities
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm">

// ❌ Custom CSS (only in globals.css if absolutely necessary)
<div className="custom-card">
```

## 🚀 Performance & Optimization

### Data Fetching
```typescript
// ✅ Server Components for data fetching
export default async function DashboardPage() {
  const [users, stats] = await Promise.all([
    getUsers(),
    getStats()
  ]);
  
  return <Dashboard users={users} stats={stats} />;
}

// ✅ Use Suspense for loading states
<Suspense fallback={<LoadingSpinner />}>
  <DataComponent />
</Suspense>
```

### Database Queries
```typescript
// ✅ Efficient Drizzle queries
const users = await db
  .select({
    id: usersTable.id,
    email: usersTable.email,
    role: usersTable.role
  })
  .from(usersTable)
  .where(eq(usersTable.active, true))
  .limit(10);
```

## 🧪 Testing Strategy

### Unit Tests (Vitest)
```typescript
// ✅ Test business logic
describe('AuthService', () => {
  it('should hash password correctly', async () => {
    const mockRepository = createMockAuthRepository();
    const service = createAuthService(mockRepository, mockSupabase);
    
    const result = await service.hashPassword('password123');
    expect(result).toBeDefined();
  });
});
```

## 📋 AI Assistant Instructions

### Code Generation Rules
1. **Always read existing files first** - Use file system tools to understand current implementation
2. **Check for constants** - Never hardcode strings that should be in constants files
3. **Follow the architecture** - Respect the layered architecture boundaries
4. **Security first** - Implement all 4 layers of security
5. **Type safety** - Use strict TypeScript, no `any`
6. **Error handling** - Implement proper error boundaries and logging

### When Adding New Features
1. Create domain structure in `src/core/domains/[domain]/`
2. Add constants to domain constants file
3. Create Zod schemas (separate for UI and server)
4. Implement repository with dependency injection
5. Create service with business logic
6. Add Server Actions in features layer
7. Create UI components following the organization pattern
8. Add security checks at all layers

### Response Format
- Always explain architectural decisions
- Provide complete, working code examples
- Include security considerations
- Mention any dependencies or setup required
- Point out potential gotchas or edge cases

## 🔧 Quick Reference

### Essential Utilities
```typescript
// Route protection
await enforceRouteAccess(pathname)     // For Server Components
await ensureUserIsAdmin()              // For Server Actions
await ensureUserIsStylist()            // For Server Actions

// Schema validation
const FormSchema = z.object({...})     // UI validation
const ActionSchema = z.object({...})   // Server validation

// Error handling
throw new UniquenessError('email')
throw new AppError('Custom error')
```

### Common Patterns
```typescript
// Factory pattern for services
export const createUserService = (repo, supabase) => ({...})

// Server Action pattern
export async function createUserAction(payload: unknown) {
  await ensureUserIsAdmin();
  return executeSafeAction(CreateUserSchema, payload, async (data) => {
    // business logic
  });
}
```

---

Remember: **Security, maintainability, and type safety are non-negotiable**. Every line of code should reflect these principles.